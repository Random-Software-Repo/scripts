#!/usr/bin/zsh


## Converts audio files (or the audio portion of video files) to another audio format using ffmpeg

function usage()
{
	echo "Audio2audio (${binarycommand}) converts one or more audio files, or extracts"
	echo "the audio from one or more video files, to a container / format using ffmpeg."
	echo "The resulting file will have the same base file name as it's source, but"
	echo "with a format-appropriate file extension. If that file already exists, a"
	echo "numerical pad will be inserted before the extension to make it unique."
	echo
	echo "Audio2audio can also be called through a hard or soft link with any of the"
	echo "following names:"
	echo "		flac2mp3, flac2opus, flac2mka, flac2ogg, flac2wav, mp32ogg,"
	echo "		mp34opus, mp32mka, mp32wav, ogg2opus, ogg2mp3, ogg2mka"
	echo "		ogg2wav"
	echo "Such usage will convert the source audio file to the indicated format"
	echo "(the bit after the \"2\")."
	echo
	echo "Audio2audio can also be called though a hard or soft link with any of the"
	echo "following names:"
	echo "		extract2flac, extract2opus, extract2ogg, "
	echo "		extract2mp3, extract2mka, extract2wav"
	echo "Such usage will drop any video streams, and extract only the audio stream"
	echo "from the source file, converting that to the indicated audio format (the "
	echo "bit after the \"2\")."
	echo
	echo "If there is more than 1 audio stream in a source file, only the first"
	echo "stream (stream 0:a:0) will be extracted, the rest being omitted."
	echo
	echo "Converting to opus will omit all video streams including coverart as"
	echo "ffmpeg does not support this. So far as audio2audio understands it, the"
	echo "opus container is a standard ogg container (and so the output of ffmpeg"
	echo "confirms) and ogg containers certainly support cover art. Yet ffmpeg"
	echo "complains, and so we omit such streams."
	echo
	echo "Converting or extracting to an \"mka\" container will copy the audio"
	echo "directly rather than re-encode it as matroska containers support most"
	echo "audio codecs (and explicitly all the ones audio2audio supports)."
	echo
	echo "Any other streams in the source files (lyrics, subtitles, etc.) will be"
	echo "omitted in the destination files in all cases."
	echo
	echo "The source format / codec (e.g. the flac in flac2mp3) is not actually"
	echo "significant as ffmpeg, the underlying tool that does the conversions,"
	echo "will automatically handle most formats / codecs. One could perfecly"
	echo "reasonably run mp32ogg with a flac file source, or an mpeg video, or "
	echo "nearly anything else."
	echo 
	echo "Usage:"
	echo "	${binarycommand} [options] <source file> [<source file> ...]"
	echo
	echo "Options:"
	echo "	-o <output type>"
	echo "		Where <output type> is one of the following:"
	echo "			flac, mka, mp3, ogg, opus, wav"
	echo "		Specifies the container and codec for the output "
	echo "		file. This option must be the first if present but"
	echo "		is unnecessary and will will be ignored if used with"
	echo "		one of the alternate linked names (see above). That"
	echo "		is \"flac2mp3 -o ogg ...\" will still produce an "
	echo "		mp3 file, etc."
	echo "	-b <bit rate>"
	echo "		Bit rate in Kbps, range and defaults vary by output"
	echo "		type. This is ignored when output is flac, mka or wav."
	echo "		There is no option for variable bit rates."
	echo "	-m"
	echo "		Merge audio channels into one (mono) for output."
	echo "	-r <frequency in hz>"
	echo "		Resample the audio to the spcified frequency between"
	echo "		1000Hz and 200,000Hz"
	echo "	-s <starting time in seconds>"
	echo "		The time (in seconds) in the source file at which to"
	echo "		begin the conversion. Defaults to the beginning of"
	echo "		the source. Option must be specified before -e or -d"
	echo "	-e <ending time in seconds>"
	echo "		The time (in seconds) in the source file at which to"
	echo "		stop the conversion. Defaults to the end of the"
	echo "		source. Option must be specified after -s"
	echo "	-d <run time in seconds>"
	echo "		Alternative to -e (specifiying the end time of the"
	echo "		conversions) instead specifies the absolute duration "
	echo "		(in seconds) of the resulting file."
	echo "		Defaults to the time remaining after the start time."
	echo "		Option must be specified after -s"
	echo "	-f <path to ffmpeg>"
	echo "		Path to the ffmpeg binary if it is either not already"
	echo "		on the path, or an alternate version is preferred."
	echo

	exit 255
}

local binarycommand="${0:t}"

local ffmpeg=ffmpeg
local codec=
local extension=
local bitrate=
local lowbit=
local highbit=
local bitrateunit=k
local video=-c:v
local videocodec=copy
local ffbitrateopt=
local ffbitrate=
local start=
local end=
local starttime=
local duration=
local mapvm="-map"
local mapv="0:v"
local mapa="0:a:0"

if [[ ${#} -eq 0 ]]
then
	usage
fi

# Extract the codec we'll be targeting via the command used to call this or the -o option. 
if [[ "${binarycommand}" =~ "2mp3|2ogg|2opus|2mka|2flac|2wav" ]]
then
	## type indicated through execuitable name
	parts=(${(s:2:)binarycommand})
	codec=${parts[2]}
elif [[ "${1}" == "-o" ]]
then
	## otherwise type indicated with the -o option
	shift
	codec="${1}"
	shift
fi

case "${codec}" in
	mp3)
			codec=mp3
			extension=mp3
			lowbit=8
			highbit=320
			bitrate=128
			;;
	flac)
			codec=flac
			extension=flac
			unset lowbit
			unset highbit
			unset bitrate
			;;
	ogg)
			codec=libvorbis
			extension=ogg
			lowbit=45
			highbit=500
			bitrate=128
			## fffmpeg cannot embed artwork in ogg files
			video="-vn"
			videocodec=
			;;
	opus)
			codec=libopus
			extension=opus
			lowbit=6
			highbit=510
			bitrate=64
			video="-vn"
			videocodec=
			mapv=
			mapvm=
			;;
	mka)
			codec=copy
			extension=mka
			unset lowbit
			unset highbit
			unset bitrate
			;;
	wav)
			codec=pcm_s16le
			extension=wav
			lowbit=
			highbit=
			bitrate=
			video="-vn"
			videocodec=
			mapvm=
			mapv=
			;;
	*		)
			echo "Unsupported audio type / codec (\"${codec}\"). Only flac, mp3, ogg, opus and mka are supported.\nRun \"audio2audio\" with no parameters for more instructions."
			exit 2
			;;
esac

if [[ "${binarycommand}" =~ "^extract.*" ]]
then
	## Any usage of audio2audio beginning with "extract" will exclude any 
	## video/image streams, which, otherwise would be copied over
	## This will also drop any embeded cover art as ffmpeg treats those as
	## video streams (video streams with a single frame, but still video)
	video="-vn"
	videocodec=
	mapv=
	mapvm=
fi


## parse any options, if present
while [[ "${1:0:1}" == "-" ]]
do
	case "${1}" in
		-b)
			shift
			if [[ -n "${lowbit}" ]]
			then
				if [[ ${1} -ge ${lowbit} && ${1} -le ${highbit} ]]
				then
					bitrate="${1}"
				else
					echo "Bitrate (${1}) is not within ${lowbit} and ${highbit}. Using default bitrate ${bitrate}."
				fi
			else
				echo "Bitrate is not meaningful for ${codec} files. The value will be ignored."
			fi
			;;
		-m)
			mono="-ac"
			monoc="1"
			;;
		-r)
			shift
			#-af aresample=48000:resampler=soxr:precision=28
			if [[ ${1} -gt 999 && ${1} -lt 200000 ]]
			then
				resample="-af" 
				resampleoptions="aresample=${1}:resampler=soxr:precision=28"
			else
				echo "Output will be resample at ${1}Hz."
			fi
			;;
		-s)
			shift
			if [[ ${1} -gt -1 && ${1} -lt 9999999999 ]]
			then
				starttime="${1}"
				start="-ss"
			else
				echo "Start time (${1}) is not a reasonable number. The value will be ignored."
			fi
			;;
		-d)
			shift
			if [[ ${1} -gt 1 && ${1} -lt 9999999999 ]]
			then
				duration="${1}"
				end="-t"
			else
				echo "Duration (${1}) is not a reasonable number. The value will be ignored."
			fi
			;;
		-e)
			shift
			if [[ ${1} -gt 1 && ${1} -lt 9999999999 ]]
			then
				if [[ "${1}" -gt ${starttime} ]]
				then
					endtime="${1}"
					end="-t"
					(( duration =  endtime - starttime ))
				else
					echo "End time (${1}) is before the start time (${starttime}). The value will be ignored."
				fi
			else
				echo "End time (${1}) is not a reasonable number. The value will be ignored."
			fi
			;;
		-f)
			shift
			if [[ -x "${1}" ]]
			then
				ffmpeg="${1}"
			else
				echo "Indicated ffmpeg location of \"${1}\" does not exist or is not executable. Ignoring."
			fi
			;;
		*)
			echo "Unknown option \"${1}\""
			echo
			usage
			;;
	esac
	shift
done


## Check for ffmpeg. Exit if it is not present (or on the path, which amounts to the same thing)
local ffmpegversion=$(${ffmpeg} -version -hide_banner &> /dev/null | grep "ffmpeg version")
if [[ ! -n "${ffmpegversion}" ]]
then
	echo "FFMPEG is required for ${binarycommand} to function. "
	if [[ "${ffmpeg}" == "ffmpeg" ]]
	then
		echo "FFMPEG is either not installed, or it is not on the path."
	else
		echo "The command \"${ffmpeg}\" provided does not seem to be ffmpeg."
	fi
	exit 1
fi


## Set the bit rate options for ffmpeg based on options passed in.
## This will only happen for codex for which bit rate is meaninful
## (ones which have had ${bitrate} set)
if [[ -n "${bitrate}" ]]
then
	ffbitrateopt="-b:a"
	ffbitrate="${bitrate}${bitrateunit}"
fi
## Check that there is at least one file/parameter remaining to convert
if [[ $# < 1 ]]
then
	usage
fi


echo "bitrate=${bitrate}"
echo "starttime=${starttime}"
echo "endtime=${endtime}"
echo "duration=${duration}"

## Loop through the remaining parameters, which should all be flac files, and convert them to mp3s
while [[ "$1" ]]
do
	## Extract the file name of the file we're to convert. This shall be called the InFile!
	## Then, derive a prospective output filename for the mp3 output file we'll be outputting.
	infile="${1}"
	outfile="${infile:r}.${extension}"
	shift
	## Make sure the infile is readable (and exists)
	if [[ -r "${infile}" ]]
	then
		## If our proposed output file already exists, we'll add a "version" to it until
		## we get a file that doesn't already exist.
		local count=1
		while [[ -e "${outfile}" ]]
		do
			outfile="${infile:r}.(${count}).${extension}"
			(( count = count +1 ))
		done


		## Do the actual conversion. Rather, let ffmpeg do the conversion.
		echo "ffmpeg -hide_banner -i \"${infile}\" ${start} ${starttime} ${end} ${duration} ${mapvm} ${mapv} -map ${mapa} ${video} ${videocodec} ${resample} ${resampleoptions}  -c:a ${codec} ${ffbitrateopt} ${ffbitrate} ${mono} ${monoc}  \"${outfile}\""
		ffmpeg -hide_banner -i "${infile}" ${start} ${starttime} ${end} ${duration} ${mapvm} ${mapv} -map ${mapa} ${video} ${videocodec} ${resample} ${resampleoptions} -c:a ${codec} ${ffbitrateopt} ${ffbitrate} ${mono} ${monoc} "${outfile}"
	else
		echo "Input file \"${infile}\" does not exist or is not readable. Skipping."
	fi
done
