#!/usr/bin/zsh
#
#	Plays audio files sending the audio to a remote
#	server defined by -host or in ${RPLAYAUDIOTARGET}
#
#	Requirements: ffmpeg installed on the client, and sox installed on the server
#			Server must have audio output that works
#			same user on both client and server 
#			ssh keys for the user playing audio installed on the server
#			use the rvolumeup and rvolumedown to control volume on server
#

function usage()
{
	print "   Rplay streams one or more audio files of most types across a"
	print "   network to another computer which will then play the audio on"
	print "   it's default audio output device."
	print ""
	print "   Usage:"
	print "       To play audio files:"
	print "           rplay [options] <file1> [<file> ...]"
	print "       or to increase the audio volume on the target:"
	print "           rvolumeup [options]"
	print "       or to increase the audio volume on the target:"
	print "           rvolumedown [options]"
	print "       or to play a kind of white noise reminescent of"
	print "       the background drone on a certain noted starship:"
	print "          rnoise [options]"
	print "             or"
	print "          renterpeise [options]"
	print ""
	print "       rvolumeup and rvolumedown are symlinks to rplay."
	print ""
	print "   General Options:"
	print "       -h | --help         This usage information."
	print "       -host | --host <hostname> The target computer to send the"
	print "                           audio stream to, or on which to issue the"
	print "                           volume commands. <hostname> will default"
	print "                           to \${RPLAYAUDIOTARGET}, if it is defined."
	print "                           --host will override this environment"
	print "                           variable."
	print "   rplay only options:"
	print "       -s | --shuffle      Play the listed files in random order."
	print "       -q | --quiet        Quiet. No visible console output."
	print "       -48 | --48          Resample the output sample rate to 48KHz"
	print "       -96 | --96          Resample the output sample rate to 96KHz"
	print ""
	print "                           Resample options are useful when sending"
	print "                           audio to a device on which the extra detail"
	print "                           will be lost (e.g. most integrated DAC "
	print "                           devices will likely not benefit noticably"
	print "                           from anything more than 16bit/48KHz digital"
	print "                           so there is no real point in sending more"
	print "                           than that over the network)."
	print "   rvolumeup and rvolumedown options:"
	print "       <volume>%           Any value of 0% to 100%. Will set the volume"
	print "                           to the specified amount. If the \"%\" is "
	print "                           omitted, will set the volume as an absolute"
	print "                           amount between 0.0 and 1.0. Any value above"
	print "                           1 will be interpereted as 1 (100%)."
	print "       +<volume>%          Will increase the volume by the specified"
	print "                           amount. This is a basis amount. +20% will"
	print "                           increase the volume from 45% to 65% if "
	print "                           starting from 45%. The default is +10% if"
	print "                           omitted."
	print "       -<volume>%          As above, but decreases the volume."
	print ""
	print "   Regardless of the original audio type, rplay will reencode the stream "
	print "   as flac to reduce network bandwidth. "
	print ""
	exit 0
}

function install_instructions()
{
	if [[ "$1" == "ffmpeg" ]]
	then
		print "The command \"${1}\" must be installed on this computer."
	else
		print "The command \"${1}\" must be installed on the remote computer"
		print "targeted by \${RPLAYAUDIOTARGET} (${RPLAYAUDIOTARGET})."
	fi
	print "This may be in your package management system as simply \"${1}\"."

	if (( $+commands[dpkg] ))
	then
		print ""
		print "You may be able to install it with the command:"
		print "    sudo apt install ${1}"
	elif (( $+commands[dnf] ))
	then
		print ""
		print "You may be able to install it with the command:"
		print "    sudo dnf install ${1}"
	elif (( $+commands[pkg] ))
	then
		print ""
		print "You may be able to install it with the command:"
		print "    sudo pkg install sox"
	fi
	exit 1
}

function is_installed()
{
	if (( ! $+commands[${1}] ))
	then
		install_instructions ${1}
	fi
}

function ssh_ok()
{
	local SSHERROR=$(ssh -o ConnectTimeout=2 -o BatchMode=yes ${RPLAYAUDIOTARGET} which sox 2>&1 )

	if [[ "${SSHERROR}" =~ "not found" ]]
	then
		install_instructions sox
	elif [[ ! "${SSHERROR}" =~ "\/.*\/sox" ]]
	then
		print "${SSHERROR}"
		print ""
		print "Rplay uses ssh with keys to connect to the remote server."
		print "Rplay is not able to connect to \"${RPLAYAUDIOTARGET}\"."
		print "You can generate a key with ssh-keygen and then copy the"
		print "to the remote server with ssh-copy-id, but the usage of these"
		print "commands is beyond the abilities of this little script."
		exit -2
	fi
}

function shuffle_tracks
{
	## i'm sure this could be more efficient as it randomizes half the elements twice, but who cares?
	for ((i = 1; i <= index; i++))
	do
		local ri=$RANDOM
		(( ri = (ri % index) + 1 ))
		local current="${tracks[${i}]}"
		tracks[${i}]="${tracks[${ri}]}"
		tracks[${ri}]="${current}"
	done
}

function starship
{
	sox -n -t flac -r 96k -b 16 -c 2 - synth whitenoise lowpass -1 120 lowpass -1 120 lowpass -1 120 gain +16| ssh ${RPLAYAUDIOTARGET} play -t flac ${quiet} -
}

function volume
{
	if [[ "${index}" -eq 0 ]]
	then
		if [[ "${1}" =~ "rvolumeup$" ]]
		then
			tracks[${index}]="+10%"
		else
			tracks[${index}]="-10%"
		fi
	fi
	ssh ${RPLAYAUDIOTARGET} mixer vol=${tracks}
}

function play
{
	if [[ ${shuffle} ]]
	then
		shuffle_tracks
	fi

	for ((i = 1; i <= index; i++))
	do
		ffmpeg -hide_banner -i "$tracks[${i}]" -v quiet -nostats ${resamp} ${resampo} -map 0:a:0 -vn -c:a flac -f flac pipe:1|ssh crow play -t flac ${quiet} -
	done

}

quiet=
rsamp=
rsampo=
shuffle=
typeset -A tracks
index=0

#while [[ "$1" =~ '^-' ]]
while [[ "$1" ]]
do
	case "${1}" in
		"-h" | "--help")
			usage
			;;
		"-host" | "--host")
			shift 1
			RPLAYAUDIOTARGET="${1}"
			;;
		"-q" | "--quiet")
			quiet="-q"
			;;
		"-s" | "--shuffle")
			shuffle="shuffle"
			;;
		"-48" | "--48")
			resamp="-af"
			resampo="aresample=48000:resampler=soxr:precision=28"
			;;
		"-96" | "--96")
			resamp="-af"
			resampo="aresample=96000:resampler=soxr:precision=28"
			;;
		"--diagnostics")
			DIAGNOSTICS=yes
			;;
		* )
			(( index ++ ))
			tracks[${index}]="${1}"
			;;
	esac
	shift 1
done

if [[ -n "${DIAGNOSTICS}" ]]
then
	print "audiotarget:${RPLAYAUDIOTARGET}"
	print "samplerate:${samplerate}"
	print "bitrate=${bitrate}"
	print "remaining parameters: $@"
fi

is_installed ffmpeg
ssh_ok ${RPLAYAUDIOTARGET}

if [[ "${0}" =~ "rplay$" ]]
then
	play
elif [[ "${0}" =~ "rvolume" ]]
then
	volume "${0}"
elif [[ "${0}" =~ "rnoise$" || "${0}" =~ "renterprise$" ]]
then
	starship
fi