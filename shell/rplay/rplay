#!/usr/bin/zsh
#
#	Plays audio files sending the audio to a remote
#	server defined in ${RPLAYAUDIOTARGET}
#
#	Requirements: sox installed on both the client and the server
#			Server must have audio output that works
#			same user on both client and server 
#			ssh keys for the user playing audio installed on the server
#			use the rvolumeup and rvolumedown to control volume on server
#

function usage()
{
	print "   Rplay streams one or more audio files of most types across a"
	print "   network to another computer which will then play the audio on"
	print "   it's default audio output device."
	print ""
	print "   Usage:"
	print "       To play audio files:"
	print "           rplay [options] <file1> [<file> ...]"
	print "       or to increase the audio volume on the target:"
	print "           rvolumeup [options]"
	print "       or to increase the audio volume on the target:"
	print "           rvolumedown [options]"
	print ""
	print "       rvolumeup and rvolumedown are symlinks to rplay."
	print ""
	print "   Options: (all options must come before the file list)"
	print "       -h | --help         This usage information."
	print "       -host <hostname>    The target computer to send the audio"
	print "                           stream to, or on which to issue the"
	print "                           volume commands. <hostname> will default"
	print "                           to \${RPLAYAUDIOTARGET}, if it is defined."
	print "                           --host will override this environment"
	print "                           variable."
	print "       -16                 Resample the output resolution to 16bit."
	print "       -48                 Resample the output sample rate to 48KHz"
	print "       -96                 Resample the output sample rate to 96KHz"
	print ""
	print "                           Resample options are useful when sending"
	print "                           audio to a device on which the extra detail"
	print "                           will be lost (e.g. most integrated DAC "
	print "                           devices will likely not benefit noticably"
	print "                           from anything more than 16bit/48KHz digital"
	print "                           so there is no real point in sending that"
	print "                           much data over the network)."
	print ""
	print "   Regardless of the original audio type, rplay will encode the stream "
	print "   as flac to reduce network bandwidth. This has very little cpu cost."
	exit 0
}

function sox_instructions()
{
	print "The command \"sox\" must be installed on both this computer."
	print "and the remote computer targeted by \${RPLAYAUDIOTARGET} (${RPLAYAUDIOTARGET})."
	print "This may be in your package management system as simply \"sox\"."

	if (( $+commands[dpkg] ))
	then
		print ""
		print "You may be able to install it with the command:"
		print "    sudo apt install sox"
	elif (( $+commands[dnf] ))
	then
		print ""
		print "You may be able to install it with the command:"
		print "    sudo dnf install sox"
	elif (( $+commands[pkg] ))
	then
		print ""
		print "You may be able to install it with the command:"
		print "    sudo pkg install sox"
	fi
	exit 1
}

function sox_installed()
{
	if (( ! $+commands[sox] ))
	then
		sox_instructions
	fi
}

function ssh_ok()
{
	local SSHERROR=$(ssh -o ConnectTimeout=1 -o BatchMode=yes ${RPLAYAUDIOTARGET} which sox 2>&1 )

	if [[ "${SSHERROR}" =~ "not found" ]]
	then
		sox_instructions
	elif [[ ! "${SSHERROR}" =~ "\/.*\/sox" ]]
	then
		print "${SSHERROR}"
		print ""
		print "Rplay uses ssh with keys to connect to the remote server."
		print "Rplay is not able to connect to \"${RPLAYAUDIOTARGET}\"."
		print "You can generate a key with ssh-keygen and then copy the"
		print "to the remote server with ssh-copy-id, but the usage of these"
		print "commands is beyond the abilities of this little script."
		exit -2
	fi
}

while [[ "$1" =~ '^-' ]]
do
	case "${1}" in
		"-h" | "--help")
			usage
			;;
		"-host")
			shift 1
			RPLAYAUDIOTARGET="${1}"
			;;
		"-16")
			bitrate="-b16"
			;;
		"-48")
			samplerate="-r48k"
			;;
		"-96")
			samplerate="-r96k"
			;;
		"--diagnostics")
			DIAGNOSTICS=yes
			;;
	esac
	shift 1
done

if [[ -n "${DIAGNOSTICS}" ]]
then
	print "audiotarget:${RPLAYAUDIOTARGET}"
	print "samplerate:${samplerate}"
	print "bitrate=${bitrate}"
	print "remaining parameters: $@"
fi

sox_installed
ssh_ok ${RPLAYAUDIOTARGET}

if [[ "${0}" =~ "rvolumeup$" ]]
then
	ssh ${RPLAYAUDIOTARGET} mixer vol=+10%
elif [[ "${0}" =~ "rvolumedown$" ]]
then
	ssh ${RPLAYAUDIOTARGET} mixer vol=-10%
else
	sox --combine sequence "$@" ${bitrate} ${samplerate} -S -t flac - | ssh ${RPLAYAUDIOTARGET} play -q -
fi