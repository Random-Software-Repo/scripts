#!/usr/bin/zsh
#
#	Plays audio files sending the audio to a remote
#	server defined by -host or in ${RPLAYAUDIOTARGET}
#
#	Requirements: ffmpeg installed on the client, and sox installed on the server
#			Server must have audio output that works
#			same user on both client and server 
#			ssh keys for the user playing audio installed on the server
#			use the rvolumeup and rvolumedown to control volume on server
#

function usage()
{
	print "   Rplay streams one or more audio files of most types across a"
	print "   network to another computer which will then play the audio on"
	print "   it's default audio output device."
	print ""
	print "   Rvolumendown will decrease the volume by a default of 10% on "
	print "   systems using either amixer or mixer for adjusting volume. "
	print ""
	print "   Rvolumeup will increase the volume by a default of 10%."
	print ""
	print "   Usage:"
	print "       To play audio files: "
	print "           rplay [options] <file1> [<file> ...]"
	print ""
	print "       or to increase the audio volume on the target:"
	print "           rvolumeup [options]"
	print ""
	print "       or to decrease the audio volume on the target:"
	print "           rvolumedown [options]"
	print ""
	print "       or to play a kind of white noise reminescent of"
	print "       the background drone on a certain noted starship:"
	print "           rnoise [options]"
	print "              or"
	print "           renterprise [options]"
	print ""
	print "       The alternate commands are symlinks to rplay."
	print ""
	print "   General Options:"
	print "       -h | --help         This usage information."
	print "       -host | --host <hostname> The target computer to send the"
	print "                           audio stream to, or on which to issue the"
	print "                           volume commands."
	print "   rplay only options:"
	print "       -s | --shuffle      Play the listed files in random order."
	print "       -q | --quiet        Quiet. No visible console output."
	print "       -48 | --48          Resample the output sample rate to 48KHz"
	print "       -96 | --96          Resample the output sample rate to 96KHz"
	print ""
	print "                           Resample options are useful when sending"
	print "                           audio to a device on which the extra detail"
	print "                           will be lost (e.g. most integrated DAC "
	print "                           devices will likely not benefit noticably"
	print "                           from anything more than 16bit/48KHz digital"
	print "                           so there is no real point in sending more"
	print "                           than that over the network)."
	print "   rvolumeup and rvolumedown options:"
	print "       <volume>            The value for <volume> defaults to a relative"
	print "                           amount of Â±10%, but an alternate value can be"
	print "                           provided. This value is a integeral percentage"
	print "                           amount the volume will be increased (positive"
	print "                           integers) or decreased (negative integers)."
	print "                           For example '+4' or '4' will increase the"
	print "                           volume by 4%, while '-17' will decrease the"
	print "                           volume by 17%. This percentage is in basis"
	print "                           points. That is, if the volume is currently at"
	print "                           60%, a change of -5% will set the volume to"
	print "                           55%. Decreasing the volume by -100 will mute"
	print "                           effectively."
	print ""
	print "   Any option can have default value set by exporting the variable RPLAYPARAMETERS"
	print "   as a string containing the desited options. For example:"
	print "       export RPLAYPARAMETERS=\"--48 --host somecomputer\""
	print "   will set the playback sample rate to 48kHz, and stream to the host \"somecomputer\"."
	print ""
	print "   Any options set in RPLAYPARAMETERS will be overridden by additonal options on the"
	print "   command line."
	print ""
	print "   Regardless of the original audio type, rplay will reencode the stream "
	print "   as flac to reduce network bandwidth. "
	print ""
	exit 0
}

function install_instructions()
{
	if [[ "$1" == "ffmpeg" ]]
	then
		print "The command \"${1}\" must be installed on this computer."
	else
		print "The command \"${1}\" must be installed on the remote computer"
		print "targeted by \${RPLAYAUDIOTARGET} (${RPLAYAUDIOTARGET})."
	fi
	print "This may be in your package management system as simply \"${1}\"."

	if (( $+commands[dpkg] ))
	then
		print ""
		print "You may be able to install it with the command:"
		print "    sudo apt install ${1}"
	elif (( $+commands[dnf] ))
	then
		print ""
		print "You may be able to install it with the command:"
		print "    sudo dnf install ${1}"
	elif (( $+commands[pkg] ))
	then
		print ""
		print "You may be able to install it with the command:"
		print "    sudo pkg install sox"
	fi
	exit 1
}

function is_installed()
{
	if (( ! $+commands[${1}] ))
	then
		install_instructions ${1}
	fi
}

function ssh_ok()
{
	local SSHERROR=$(ssh -o ConnectTimeout=2 -o BatchMode=yes ${RPLAYAUDIOTARGET} which sox 2>&1 )

	if [[ "${SSHERROR}" =~ "not found" ]]
	then
		install_instructions sox
	elif [[ ! "${SSHERROR}" =~ "\/.*\/sox" ]]
	then
		print "${SSHERROR}"
		print ""
		print "Rplay uses ssh with keys to connect to the remote server."
		print "Rplay is not able to connect to \"${RPLAYAUDIOTARGET}\"."
		print "You can generate a key with ssh-keygen and then copy the"
		print "to the remote server with ssh-copy-id, but the usage of these"
		print "commands is beyond the abilities of this little script."
		exit -2
	fi
}

function shuffle_tracks
{
	## i'm sure this could be more efficient as it randomizes half the elements twice, but who cares?
	for ((i = 1; i <= index; i++))
	do
		local ri=$RANDOM
		(( ri = (ri % index) + 1 ))
		local current="${tracks[${i}]}"
		tracks[${i}]="${tracks[${ri}]}"
		tracks[${ri}]="${current}"
	done
}

function starship
{
	sox -n -t flac -r 96k -b 16 -c 2 - synth whitenoise lowpass -1 120 lowpass -1 120 lowpass -1 120 gain +16| ssh ${RPLAYAUDIOTARGET} play -t flac ${quiet} -
}

function volume
{
	local av="10%-"
	local mv="-10%"
	if [[ "${1}" =~ "rvolumeup$" ]]
	then
		av="10%+"
		mv="+10%"
	fi

	if [[ "${index}" -ne 0 ]]
	then
		av="${tracks}"
		mv="${tracks}"
	fi
	ssh ${RPLAYAUDIOTARGET} '/bin/sh am=$(command -v amixer);mm=$(command -v mixer); if [ $am ]; then amixer sset Master '${av}'; elif [ $mm ]; then mixer vol='${mv}'; else echo "Neither amixer nor mixer are present and so we cannot change the volume using either of those commands.";fi'
}

function play
{
	if [[ ${shuffle} ]]
	then
		shuffle_tracks
	fi
	# create a non-associative array of files in order
	local files=()
	for ((i = 1; i <= index; i++))
	do 
		files+=(${tracks[${i}]})
	done

	sox --combine sequence "$files[@]" ${bitrate} ${samplerate} ${quiet} -t flac -| ssh ${RPLAYAUDIOTARGET} sox ${quiet} -t flac - -d
}

function check_params()
{
	while [[ "$1" ]]
	do
		case "${1}" in
			"-h" | "--help")
				usage
				;;
			"-host" | "--host")
				shift 1
				RPLAYAUDIOTARGET="${1}"
				;;
			"-q" | "--quiet")
				quiet="-q"
				;;
			"-s" | "--shuffle")
				shuffle="shuffle"
				;;
			"-48" | "--48" | "-96" | "--96")
				samplerate="-r$(echo "${1}"|grep -o "[0-9].")k"
				;;
			"--diagnostics")
				DIAGNOSTICS=yes
				;;
			* )
				(( index ++ ))
				tracks[${index}]="${1}"
				;;
		esac
		shift 1
	done	

}
quiet=-S
shuffle=
typeset -A tracks
index=0

eval "rplayparams=($RPLAYPARAMETERS)"
check_params $rplayparams
check_params "$@"

if [[ $index -eq 0 ]]
then
	usage
fi

if [[ -n "${DIAGNOSTICS}" ]]
then
	print "audiotarget:${RPLAYAUDIOTARGET}"
	print "samplerate:${resampo}"
	print "remaining parameters: $@"
	exit
fi

is_installed sox
ssh_ok ${RPLAYAUDIOTARGET}

if [[ "${0}" =~ "rplay$" ]]
then
	play
elif [[ "${0}" =~ "rvolume" ]]
then
	volume "${0}"
elif [[ "${0}" =~ "rnoise$" || "${0}" =~ "renterprise$" ]]
then
	starship
fi