#!/usr/bin/zsh

function usage()
{
	print "   Rplay streams one or more audio files of most types across a"
	print "   network to another computer which will then play the audio on"
	print "   it's default audio output device."
	print ""
	print "   Rvolumendown will decrease the volume by a default of 10% on "
	print "   systems using either amixer or mixer for adjusting volume. "
	print ""
	print "   Rvolumeup will increase the volume by a default of 10%."
	print ""
	print "   Usage:"
	print "       To play audio files: "
	print "           rplay [options] <file1> [<file> ...]"
	print ""
	print "       or to increase the audio volume on the target:"
	print "           rvolumeup [options]"
	print ""
	print "       or to decrease the audio volume on the target:"
	print "           rvolumedown [options]"
	print ""
	print "       or to play a kind of white noise reminescent of"
	print "       the background drone on a certain noted starship:"
	print "           rnoise [options]"
	print "              or"
	print "           renterprise [options]"
	print ""
	print "       The alternate commands are symlinks to rplay."
	print ""
	print "   General Options:"
	print "       -h | --help         This usage information."
	print "       -host | --host <hostname> "
	print "                           The target computer to send the audio"
	print "                           stream to, or on which to issue the"
	print "                           volume commands."
	print "   rplay only options:"
	print "       -s | --shuffle      Play the listed files in random order."
	print "       -q | --quiet        Quiet. No visible console output."
	print "       -48 | --48 | -96 | --96"
	print "                           Resample the output to the specified rate"
	print "                           in kilo-hertz (kHz). No default."
	print "       -v | --v            Print extra information about each track played,"
	print "                           adding the artist & album artist name to the default"
	print "                           album name, track number and track name."
	print "       -vv | --vv          Will add track length to the -v output."
	print "       -vvv | --vvv        Will add genre and date (originaldate) to the output."
	print "                           Rplay will use ffprobe (if installed) to extract"
	print "                           metadata from all file types. If no metadata is "
	print "                           found via ffprobe (no metadata, no ffprobe installed)"
	print "                           then rplay will \"guess\" that the file name includes"
	print "                           the track number and title, the parent directory is the"
	print "                           album name, and the grand-parent directory is the"
	print "                           artist name. This may not be correct, but rplay can"
	print "                           only work with what it's got."
	print "       --gapless           Will play all tracks with no gap between them."
	print "                           This will result in rplay being unable to display"
	print "                           any track-specific details, and will override any."
	print "                           -v options."
	print "       --no-down-mix       By default rplay will down-mix all audio to "
	print "                           2-channel stero output *before* sending to the"
	print "                           remote playback device. This option will bypass"
	print "                           that behavior, and retain the original channel"
	print "                           layout (be that 5.1, 3.1, mono or otherwise)."
	print "                           (Technically, the default will *up-mix* mono"
	print "                           to stereo, but that's probably not important.)"
	print "                           The actual playback on the remote device, using"
	print "                           sox's play, will undoubtedly down-mix to whatever"
	print "                           channels are available on that device itself."
	print ""
	print "   rvolumeup and rvolumedown options:"
	print "       <volume>            The value for <volume> defaults to a relative"
	print "                           amount of Â±10%, but an alternate value can be"
	print "                           provided. This value is a integeral percentage"
	print "                           amount the volume will be increased (positive"
	print "                           integers) or decreased (negative integers)."
	print "                           For example '+4' or '4' will increase the"
	print "                           volume by 4%, while '-17' will decrease the"
	print "                           volume by 17%. This percentage is in basis"
	print "                           points. That is, if the volume is currently at"
	print "                           60%, a change of -5% will set the volume to"
	print "                           55%. Decreasing the volume by -100 will mute"
	print "                           effectively."
	print ""
	print "   Any option can have default value set by exporting the variable RPLAYPARAMETERS"
	print "   as a string containing the desited options. For example:"
	print "       export RPLAYPARAMETERS=\"--48 --host somecomputer\""
	print "   will set the playback sample rate to 48kHz, and stream to the host \"somecomputer\"."
	print ""
	print "   Any options set in RPLAYPARAMETERS will be overridden by additonal options on the"
	print "   command line."
	print ""
	print "   Regardless of the original audio type, rplay will reencode the stream as flac to"
	print "   reduce network bandwidth. "
	print ""
	exit 0
}

function install_instructions()
{
	if [[ "${2}" ]]
	then
		print "The command \"${1}\" must be installed on this computer."
	else
		print "The command \"${1}\" must be installed on the remote computer"
		print "targeted by \${RPLAYAUDIOTARGET} (${RPLAYAUDIOTARGET})."
	fi
	print "This may be in your package management system as simply \"${1}\"."

	if (( $+commands[dpkg] ))
	then
		print ""
		print "You may be able to install it with the command:"
		print "    sudo apt install ${1}"
	elif (( $+commands[dnf] ))
	then
		print ""
		print "You may be able to install it with the command:"
		print "    sudo dnf install ${1}"
	elif (( $+commands[pkg] ))
	then
		print ""
		print "You may be able to install it with the command:"
		print "    sudo pkg install ${1}"
	fi

	if [[ "$2" ]]
	then
		print ""
		print "Additionally, to enable playback for most audio file"
		print "types, you may need to install additional packages for"
		print "${1}. These additional packages may be installable using"
		print "the package name \"${2}\", or something similar."
	fi
	print ""
	exit 1
}

function is_ffmpeg_installed()
{
	if (( ! $+commands[ffmpeg] ))
	then
		install_instructions ffmpeg
	fi
}

function ssh_ok()
{
	local SSHERROR=$(ssh -o ConnectTimeout=2 -o BatchMode=yes ${RPLAYAUDIOTARGET} which sox 2>&1 )

	if [[ "${SSHERROR}" =~ "not found" ]]
	then
		install_instructions sox
	elif [[ ! "${SSHERROR}" =~ "\/.*\/sox" ]]
	then
		print "${SSHERROR}"
		print ""
		print "Rplay uses ssh with keys to connect to the remote server."
		print "Rplay is not able to connect to \"${RPLAYAUDIOTARGET}\"."
		print "You can generate a key with ssh-keygen and then copy the"
		print "to the remote server with ssh-copy-id, but the usage of these"
		print "commands is beyond the abilities of this little script."
		exit -2
	fi
}

function shuffle_tracks
{
	## i'm sure this could be more efficient as it randomizes half the elements twice, but who cares?
	for ((i = 1; i <= index; i++))
	do
		local ri=$RANDOM
		(( ri = (ri % index) + 1 ))
		local current="${tracks[${i}]}"
		tracks[${i}]="${tracks[${ri}]}"
		tracks[${ri}]="${current}"
	done
}

function starship
{
	#sox -n -t flac -r 96k -b 16 -c 2 - synth whitenoise lowpass -1 120 lowpass -1 120 lowpass -1 120 gain +16| ssh ${RPLAYAUDIOTARGET} play -t flac ${quiet} -
	ssh ${RPLAYAUDIOTARGET} "play -n -c1 synth whitenoise lowpass -1 120 lowpass -1 120 lowpass -1 120 gain +16"
}

function volume
{
	if [[ "${1}" =~ "rvolumedown$" ]]
	then
		# default VolumeADJustment to -10%
		vadj=-10
	else
		vadj=10
	fi

	if [[ "${2}" =~ '^[-+]{0,1}[0-9]+$' ]]
	then
		vadj="${2}"
	else
		if [[ "${2}" ]]
		then
			echo "${2} is not numeric. Volume can only be adjusted in integer amounts (+ or -)."
			exit -1
		fi
	fi

	if [[ "${vadj}" -lt 0 ]]
	then
		(( vadj = vadj * -1 ))
		amixer="${vadj}%-"
		mixer="-${vadj}%"
	else
		(( vadj = vadj * 1 ))
		amixer="${vadj}%+"
		mixer="+${vadj}%"
	fi

	echo 'export am=$(command -v amixer);export mm=$(command -v mixer); if [ $am ]; then amixer sset Master '${amixer}'; elif [ $mm ]; then mixer vol='${mixer}'; else echo "Neither amixer nor mixer are present and so we cannot change the volume using either of those commands.";fi' | ssh ${RPLAYAUDIOTARGET} /bin/sh 

}

function play
{
	if [[ ${shuffle} ]]
	then
		shuffle_tracks
	fi
	# create a non-associative array of files in order
	#local files=()
	local ffmpegfiles=()
	for ((i = 1; i <= index; i++))
	do
		ffmpegfiles+=("-i" "${tracks[${i}]}")
		#files+=("${tracks[${i}]}")
	done

	if [[ ${gapless} ]]
	then
		## sox | sox (play)
		##sox ${quiet} --combine sequence "$files[@]" -b ${bitrate} ${samplerate} -t flac - | ssh ${RPLAYAUDIOTARGET} 'play -q --buffer=1024 -t flac - '

		## ffmpeg | sox (play)
		ffmpeg -hide_banner  -loglevel quiet "$ffmpegfiles[@]" -filter_complex "concat=n=${index}:v=0:a=1[a]" -map "[a]" ${stats} -vn ${downmixchannelsoption} ${downmixchannels} -c:a flac ${samplerateopt} ${samplerate} -f flac pipe:1  | ssh ${RPLAYAUDIOTARGET} "play -q -t flac - "

		## ffmpeg | ffmpeg (ffplay)
		#ffmpeg -hide_banner  -loglevel quiet "$ffmpegfiles[@]" -filter_complex "concat=n=${index}:v=0:a=1[a]" -map "[a]" ${stats} -vn -c:a flac ${samplerateopt} ${samplerate} -f flac pipe:1  | ssh ${RPLAYAUDIOTARGET} "ffplay -hide_banner -nodisp -loglevel quiet -f flac - "

		## ffmpeg | mpv
		#ffmpeg -hide_banner  -loglevel quiet "$ffmpegfiles[@]" -filter_complex "concat=n=${index}:v=0:a=1[a]" -map "[a]" ${stats} -vn -c:a flac ${samplerateopt} ${samplerate} -f flac pipe:1  | ssh ${RPLAYAUDIOTARGET} "mpv --no-terminal - "
	else
		for ((i = 1; i <= index; i++))
		do
			ffmpegfiles=("-i" "${tracks[${i}]}")
			## ffmpeg | sox (play)
			local metadata="${tracks[${i}]:h:t} / ${tracks[${i}]:t:r}"
			if (( $+commands[ffprobe] ))
			then
				trackmetadata=$(ffprobe -hide_banner -select_streams a:0 -show_entries 'stream_tags : format_tags' "${tracks[${i}]}"  2> /dev/null )
				local album="$(echo "${trackmetadata}" | grep -i '^TAG:ALBUM=' | awk '-F=' '{print $2}')"
				local artist="$(echo "${trackmetadata}" | grep -i '^TAG:ARTIST=' | head -1 | awk '-F=' '{print $2}')"
				local albumartist="$(echo "${trackmetadata}" | grep -i '^TAG:ALBUM_ARTIST' | head -1 | awk '-F=' '{print $2}')"
				local title="$(echo "${trackmetadata}" | grep -i '^TAG:TITLE=' | awk '-F=' '{print $2}')"
				local track="$(echo "${trackmetadata}" | grep -i '^TAG:track=' | awk '-F=' '{print $2}')"
				local genre="$(echo "${trackmetadata}" | grep -i '^TAG:GENRE=' | awk '-F=' '{print $2}')"
				local date="$(echo "${trackmetadata}" | grep -i '^TAG:DATE=' | awk '-F=' '{print $2}')"
				local originaldate="$(echo "${trackmetadata}" | egrep -i '^TAG:(TORY|ORIGINALDATE)=' | awk '-F=' '{print $2}')"
				local composer="$(echo "${trackmetadata}" | grep -i '^TAG:COMPOSER=' | awk '-F=' '{print $2}')"
				trackstreamdata=$(ffprobe -hide_banner  -show_streams  -select_streams a "${tracks[${i}]}"  2> /dev/null )
				local duration="$(echo "${trackstreamdata}" | grep -i '^duration=' | awk '-F=' '{print $2}')"

				if [[ "${album}" ]]
				then
					metadata="${album}\n  #${track} - ${title}"
					if [[ ${verbose} -gt 1 ]]
					then
						if [[ "${albumartist}" ]]
						then
							if [[ "${albumartist}" != "${artist}" ]]
							then
								artist="${albumartist} (${artist})"
							else
								artist="${albumartist}"
							fi
						fi
						metadata="${artist}\n${metadata}"
					fi
					if [[ ${verbose} -gt 3 ]]
					then
						if [[ "${genre}" ]]
						then
							metadata="${metadata}\n  Genre: ${genre}"
						fi
						if [[ "${composer}" ]]
						then
							metadata="${metadata}\n  Composer: ${composer}"
						fi
						if [[ "${date}" ]]
						then
							date="Released: ${date}"
							if [[ "${originaldate}" ]]
							then
								date="${date} (original date: ${originaldate})"
							fi
							metadata="${metadata}\n  ${date}"
						fi
					fi
					if [[ ${verbose} > 2 ]]
					then
						local formatduration="$(date -ud "@${duration}" '+%T')"
						metadata="${metadata}\n  Length: ${formatduration}"
					fi
				fi
			fi

			if [[ ${i} -gt 1 ]]
			then
				for ((c = 1; c <= COLUMNS; c++))
				do
					print -n "â"
				done
				print ""
			fi
			print "${i} of ${index}\n${metadata}"
			ffmpeg -hide_banner  -loglevel quiet "$ffmpegfiles[@]" -filter_complex "concat=n=1:v=0:a=1[a]" -map "[a]" ${stats} -vn ${downmixchannelsoption} ${downmixchannels} -c:a flac ${samplerateopt} ${samplerate} -f flac pipe:1  | ssh ${RPLAYAUDIOTARGET} "play -q -t flac - "
		done
	fi
}

function check_params()
{
	while [[ "$1" ]]
	do
		case "${1}" in
			"-h" | "--help")
				usage
				;;
			"-host" | "--host")
				shift 1
				RPLAYAUDIOTARGET="${1}"
				;;
			"-q" | "--quiet")
				quiet="-q"
				stats=""
				gapless=yes
				verbose=
				;;
			"-s" | "--shuffle")
				shuffle="shuffle"
				;;
			"-48" | "--48" | "-96" | "--96")
				samplerateopt="-ar"
				samplerate="$(echo "${1}"|grep -o "[0-9].")000"
				;;
			"--no-down-mix")
				downmixchannelsoption=
				downmixchannels=
				;;
			"--gapless")
				gapless=yes
				verbose=
				;;
			"--diagnostics")
				DIAGNOSTICS=yes
				;;
			"-v" | "--v")
				verbose=2
				;;
			"-vv" | "--vv")
				verbose=3
				;;
			"-vvv" | "--vvv")
				verbose=4
				;;
			* )
				(( index ++ ))
				tracks[${index}]="${1}"
				;;
		esac
		shift 1
	done	

}

stats=-stats
quiet=-S
shuffle=
typeset -A tracks
index=0
samplerateopt=
samplerate=
downmixchannelsoption=-ac
downmixchannels=2
gapless=
verbose=1

eval "rplayparams=($RPLAYPARAMETERS)"
check_params $rplayparams
check_params "$@"

if [[ $index -eq 0 ]]
then
	if [[ "${0}" =~ "rplay" ]]
	then
		usage
	fi
fi

if [[ -n "${DIAGNOSTICS}" ]]
then
	print "audiotarget:${RPLAYAUDIOTARGET}"
	print "samplerate:${samplerateffmpeg}"
	print "remaining parameters: $@"
	exit
fi

is_ffmpeg_installed
ssh_ok ${RPLAYAUDIOTARGET}

if [[ "${0}" =~ "rplay$" ]]
then
	play
elif [[ "${0}" =~ "rvolume" ]]
then
	volume "${0}" "${tracks}"
elif [[ "${0}" =~ "rnoise$" || "${0}" =~ "renterprise$" ]]
then
	starship
fi